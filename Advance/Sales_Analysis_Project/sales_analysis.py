# -*- coding: utf-8 -*-
"""Sales_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WcgYLu8Seu2M8FdVo6tu3q9IWEKnbn4I

*What was the best month for sales? How much     was earned that month?\

*What city sold the most product?\

*What time should we display advertisemens to maximize the likelihood of customerâ€™s buying product?\

*What products are most often sold together?\

*What product sold the most? Why do you think it sold the most?\

### importing libraries
"""

import pandas as pd
import numpy as np
import os

"""# Collect and Concat Data"""

from google.colab import drive
drive.mount('/content/drive')

files =[ file for file in os.listdir('/content/drive/MyDrive/Datasets/Sales_dataset')]
all_months_sales_data = pd.DataFrame()
path= '/content/drive/MyDrive/Datasets/Sales_dataset/'
for file in files:
  df =  pd.read_csv('/content/drive/MyDrive/Datasets/Sales_dataset/'+file)
  all_months_sales_data = pd.concat([all_months_sales_data,df])

all_months_sales_data.to_csv(path+'all_months_sales_data.csv',index=False)

df2 = pd.read_csv('/content/drive/MyDrive/Datasets/Sales_dataset/all_months_sales_data.csv')
df2.head()

"""# Data Cleaning"""

df2.info()

df2.isnull().values.any()

"""### Find null values"""

df2.isnull().sum()

"""### Filter null values and remove them"""

nan_df = df2[df2.isna().any(axis=1)]
df2 = df2.dropna(how='all')
#nan_df

"""### Find Or data filtering data"""

df2 = df2[df2['Order Date'].str[0:2]!='Or']
df2

"""### Adding total sales price column"""

import pandas as pd
df2['Quantity Ordered']=pd.to_numeric(df2['Quantity Ordered'])
df2['Price Each'] = pd.to_numeric(df2['Price Each'])
df2['Price Each']

"""### Add month column"""

df2['Month'] = df2['Order Date'].str[0:2]
df2['Month'] = df2['Month'].astype('int32')
df2.head()

df2['Sales'] = df2['Quantity Ordered'] * df2 ['Price Each']
df2.head()

"""### When most of the sales are occured?"""

results_sales = df2.groupby('Month').sum()
results_sales

import matplotlib.pyplot as plt

months = range(1,13)
plt.figure(figsize=(8,8))
plt.bar(months,results_sales['Sales'])
plt.xticks(months)
plt.xlabel('Sales Month')
plt.ylabel('Sales in USD ($)')
plt.show()

"""## What city sales most product"""

def getCity(address):
  return address.split(',')[1]

def getState(address):
  return address.split(',')[2].split(' ')[1]
    
df2['City'] = df2['Purchase Address'].apply(lambda x:f"{getCity(x)} ({getState(x)})" )
df2.head()

result_city = df2.groupby('City').sum()
result_city

#plt.bar()
cities = [city for city ,df in df2.groupby(['City'])]
sales=result_city['Sales'].values
#cities
plt.bar(cities,result_city['Sales'])
plt.xticks(cities,rotation='vertical',size=8)
plt.ylabel("Sales in USD ($)")
plt.xlabel("City name")
plt.show()

"""## What time should we display advertisments to maximize likehood of customer's buying product??"""

df2['Order Date']= pd.to_datetime(df2['Order Date'])
df2.head(2)

df2['Hour'] = df2['Order Date'].dt.hour
df2['Minute'] = df2['Order Date'].dt.minute
#df2.info()

hours = [hour for hour ,df in df2.groupby('Hour')]
plt.plot(hours,df2.groupby('Hour').count())
plt.xticks(hours)
plt.grid()
plt.xlabel('Hours of a day')
plt.ylabel('Sales in a day $')
plt.show()

"""### What Products are most often sold togather???"""

df3 = df2[df2['Order ID'].duplicated(keep = False)]
df3['Grouped'] = df3.groupby('Order ID')['Product'].transform(lambda x : ','.join(x))
df3 = df3[['Order ID','Grouped']].drop_duplicates()
df3

from itertools import combinations
from collections import Counter
count=Counter()

for row in  df3['Grouped']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list,2)))

for key,value in count.most_common(10):
  print(key,value)
#  print(key,value)

"""### What product sold the most???"""

products_group=df2.groupby('Product')
#products_group
#products.head()
quantity_order = products_group.sum()['Quantity Ordered']
#plt.bar()
products = [product for product ,df in products_group]
print(products)
plt.bar(products,quantity_order)
plt.xticks(products,rotation='vertical',size=8)
plt.ylabel("Product Sales in USD ($)")
plt.xlabel("Product name")
plt.show()

price = df2.groupby("Product").mean()['Price Each']
#price
fig,ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.bar(products,quantity_order,color = 'g')
ax2.plot(products,price,'r-')
ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Order',color='g')
ax2.set_ylabel('Price ($)',color='r')
ax1.set_xticklabels(products,rotation='vertical',size=8)
plt.show()

"""# Data Cleaning and Data Engineering

# Data Visualization

# Data modelling

# Data Prediction and accuracy test
"""